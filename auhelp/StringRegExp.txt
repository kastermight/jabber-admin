
StringRegExp

Ищет в строке совпадения с образцом, заданным в виде регулярного выражения.

StringRegExp ( "test", "pattern" [, flag [, offset]] )

---  Таблица параметров  ---
test
	Строка для поиска.
pattern
	Образец для поиска (шаблон).
flag
	[опционально] флаг, определяющий поведение функции. См. ниже. По умолчанию равен 0.
offset
	[опционально] позиция строки, начиная с которой будут искаться совпадения (нумерация начинается с 1). По умолчанию равен 1.


---  Таблица параметров  ---
flag
	Поведение
0
	Возвращает 1 (совпадение найдено) или 0 (не найдено).
1
	Возвращает массив совпадений (см. примечания).
2
	Возвращает массив совпадений, включая полное совпадение с шаблоном (стиль Perl / PHP).
3
	Возвращает массив всех совпадений.
4
	Возвращает массив массивов всех совпадений, включая полное совпадение с шаблоном (стиль Perl / PHP).

---  Таблица возвращаемых значений  ---
flag = 0:

@Error	Означает
2 	Неправильный шаблон. @extended = номер первого ошибочного символа в шаблоне.


flag = 1 или 2:

@Error	Означает
0	Возвращает массив. @extended содержит значение offset для дальнейшего поиска.
1	Нет совпадений. Возвращаемое значение - не массив.
2	Неправильный шаблон, возвращаемое значение - не массив.  @extended = номер первого ошибочного символа в шаблоне.


flag = 3 или 4:

@Error	Означает
0	Возвращает массив совпадений.
1	Нет совпадений. Возвращаемое значение - не массив.
2	Неправильный шаблон, возвращаемое значение - не массив.  @extended = номер первого ошибочного символа в шаблоне.

---  Примечания  ---
Параметр flag может принимать пять значений (от 0 до 4). При использовании 0, функция возвращает true (1) или false (0), что означает, был ли найден шаблон или нет. При использовании 1 или 2, функция находит первое совпадение с шаблоном и возвращает последовательности символов, совпавшие в группах, в массиве. При использовании 3 или 4, функция находит все возможные совпадения и возвращает последовательности символов, совпавшие в группах, в массиве. При использовании 2 или 4, возвращаемый массив также включает в себя последовательность(и) символов, совпавшую(и) с полной строкой шаблона, а не только символы, совпавшие в группах, как при использовании флага 1 или 3.

Регулярные выражения - это простой путь найти нужную подстроку в строке. Регулярные выражения - это строки, являющиеся сочетанием обычных символов и символов, имеющих специальное значение, указывающих на то, что может изменяться в целевой строке. Регулярные выражения в AutoIt по умолчанию учитывают регистр.

Регулярные выражения составляются из одного или более простых спецификаторов. Если символа нет в следующей таблице, значит он соответствует только самому себе.

Символа повтора (*, +, ?, {...} ) будут соответствовать строке наибольшей длины, если сразу же за ними не идёт символ вопросительный знак '?' (в этом случае часть шаблона будет соответствовать строке наименьшей длины).

Вложенные группы разрешены, однако, следует помнить, что все внешние группы (за исключением незахватывающих) будут возвращены в массиве после внутренних групп.

Полное описание может быть найдено здесь (англ.)

Осторожно: неправильно написанное регулярное выражение может стать причиной зацикливания и даже вызвать сбой работы скрипта.

Метасимволы вне квадратных скобок

---  Таблица параметров  ---
( )
	начало и конец группы, например (text). Означают последовательность. Используются для применения квантификаторов не к одному символу, а к нескольким, а также для дальнейшего использования найденной последовательности.
[ ]
	начало и конец описания символьного класса, например [a-z]. Символьный класс возвращает один символ из множества. Изменить это могут повторители.
{ }
	начало и конец повторителей, например {3,8}
\
	экранирующий символ, принять метасимвол как обычный символ, например (\\, \., \[, \], \{, \}, \*).
^
	начало строки (или начало текста в многострочных текстах), например ^text text$
$
	конец строки (или конец текста в многострочных текстах), например ^text text$
.
	любой символ, кроме перевода строки (по умолчанию)
|
	символ "или", обычно внутри группы, например (10|20)
?
	предыдущий символ либо имеется, либо не имеется, аналогично и для групп. После символа повтора - жадность патерна - (.*?)
*
	повтор предыдущего символа или группы 0 и более раз
+
	повтор предыдущего символа или группы 1 и более раз

Метасимволы внутри квадратных скобок

Часть шаблона, заключенная в квадратные скобки, называется символьным классом. Внутри скобок метасимволы теряют свое специальное значение, кроме метасимволов принадлежащих этому классу. Экранировать требуется только 4 символа \ - ] [. Если символ "-" находится в конце перечисления, то не требует экранирования. В шаблоне могут использоваться метасимволы групп, но не используются метасимволы границ, например \A, \B, \Z, \z, а метасимвол \b означает символ возврата 'backspace'.

---  Таблица параметров  ---
\
	экранирующий символ
^
	символ исключения, но в случае, когда стоит первым, например [^3]
-
	символ охвата, например [a-z], то есть все символы от a до z
[ ]
	начало и конец описания символьного класса, например [a-z]

Метасимволы подстановки

---  Таблица параметров  ---
\1 - \9
	ссылка на найденную группу в самом шаблоне и в шаблоне замены
$1 - $9
	ссылка на найденную группу в шаблоне замены
$0 или \0
	весь шаблон поиска или все группы
\a
	представляет символ с десятичным ASCII-кодом 7 (звонок). При выводе производит звуковой сигнал. BEL (hex 07)
\cn
	представляет управляющий символ, который генерируется при нажатии комбинации клавиш Ctrl+n, где n- символ, например \cD соответствует Ctrl+D
\e
	chr(27) - символ escape (hex 1B)
\f
	chr(12) перенос страницы (hex 0C)
\h
	[ \t] любой горизонтальный пробел, табуляция
\H
	[^\h] - любой символ, который не пробел или табуляция
\n
	@LF, chr(10) - символ перехода на новую строку (hex 0A)
\N
	\n или \r - символ перехода на новую строку или возврат каретки, но не оба вместе. Последний случай - \N?
\Q ... \E
	любые метасимволы между \Q и \E воспринимаются как текст. Не исключайте ошибки: \QD:\Edit\1.txt\E
\r
	@CR, chr(13) - символ возврат каретки (hex 0D)
\t
	@TAB, chr(9) символ табуляции - tab (hex 09)
\v
	chr(11) вертикальная табуляция (перенос строки)
\V
	[^\v] - любой символ, который не chr(11) вертикальная табуляция (перенос строки)
\x**
	где * - любая шестнадцатеричная цифра. Вставка символа с шестнадцатеричным кодом 0x**, например \x41 вставит латинскую букву 'A', \x50\x65\x72\x6C - слово Perl
\x{***..}
	символ с шестнадцатеричным кодом ***.., например \x{FF0000}
\0**
	где * - любая восьмеричная цифра. Вставка символа с восьмеричным кодом 0**, например \040 вставит пробел
\0###
	любой ASCII символ, заданный в виде числового кода. Может иметь до 3 цифр
\0x##
	любой ASCII символ, заданный в шестнадцатеричном представлении. Может иметь до 2 цифр
\#
	позиция. Означает сохранение в возвращаемом массиве положения текущего символа в строке
\nnn
	представляет символ, восьмеричный код которого равен nnn. Например, последовательность \120\145\162\154 представляет слово Perl (\120 - восьмеричный код буквы Р, \145 - буквы е, \162 - буквы r, \154 - буквы l)
\G
	обозначает точку, в которой закончился предыдущий поиск.

Метасимволы для задания групп символов

---  Таблица параметров  ---
\d
	[0-9] - любая десятичная цифра
\D
	[^0-9] любая не цифра
\s
	[\f\n\r\t\v\h ] - пустой символ: от Chr(9) до Chr(13) (перенос страницы, табуляция, возврат каретки, перевод строки и пробел Chr(32) ).
\S
	[^\f\n\r\t\v\h ] - любой непробельный символ
\w
	[0-9a-zA-Z_] - любой алфавитно-числовой символ или подчеркивание (только буквы английского алфавита)
\W
	[^0-9a-zA-Z_] - любой символ неслова

Границы символов

---  Таблица параметров  ---
\A
	Начало текста, не зависит от флага "(?m)" и поэтому может встретится только 1 раз
\z
	Исключительно конец текста, не зависит от флага "(?m)" и поэтому может встретится только 1 раз
\Z
	Конец текста, т. е. граница между любым символом и концом текста или до символа \n, если он в конце строки, не зависит от флага "(?m)" и поэтому может встретится только 1 раз.
\b
	начало или конец слова, т. е. граница между символами, один из которых удовлетворяет \W, а другой - удовлетворяет \w (только границы слов английского алфавита)
\B
	Середина слова, т. е. граница между символами, оба которых удовлетворяют \W или оба которых удовлетворяют \w

Флаги модификаторы

Ставятся в начало регулярного выражения или группы. Состояние модификаторов выключено по умолчанию, соответственно для использования требуется включить.
Пример использования : (?i)(Text) или ((?-i)Text), допустимо комбинировать (?is)(Text) или ((?imsx)Text)

---  Таблица параметров  ---
(?i)
	независимо от регистра символов
(?-i)
	отменяет ранее включенный (?i)
(?m)
	в многострочном тексте символы ^ и $ означают начало и конец строки соответственно, иначе начало и конец текста
(?-m)
	отменяет ранее включенный (?m)
(?s)
	символ "точка" (.) дополнительно включает в себя перенос строки в многострочных текстах, иначе только любой символ
(?-s)
	отменяет ранее включенный (?s)
(?x)
	режим без учёта пробелов между частями регулярного выражения и позволяет использовать # для комментариев. Пробелы позволяют сделать образец лучше читаемым. Пример комментариев - (?#text). Текст после символа # и до закрывающей скобки ) игнорируется интерпретатором и используется для добавления комментария непосредственно в регулярное выражение.
(?-x)
	отменяет ранее включенный (?x)
(?U)
	инвертировать жадность квантификаторов
(?-U)
	отменяет ранее включенный (?U)

Флаги групп

Допустимо комбинировать, например (?imsx:Text)

---  Таблица параметров  ---
(?i:...)
	группа, независящая от регистра символов, например (?i:Text)
(?-i:...)
	группа, зависящая от регистра символов, например (?-i:Text)
(?:...)
	исключить группу из найденных, например (?:Text)
(?>...)
	группа не входящая в поиск, но имеет свойство ревнивого квантификатора, например (?>Text)(Text)
(?=...)
	группа не входящая в поиск, но проверяющая совпадение образца справа, например (Text)(?=Text)
(?!...)
	группа не входящая в поиск, но проверяющая не совпадение образца справа, например (Text)(?!Text)
(?<=...)
	группа не входящая в поиск, но проверяющая совпадение образца слева, например (?<=Text)(Text)
(?<!...)
	группа не входящая в поиск, но проверяющая не совпадение образца слева, например (?<!Text)(Text)

Повтор образца, применяется к символам и группам (квантификаторы)

---  Таблица параметров  ---
{n}
	повторить предыдущий символ n раз
{n,}
	повторить предыдущий символ n и более раз ( {n,}? - предпочтительно наименьший захват)
{,n}
	повторить предыдущий символ от 0 до n раз
{n, m}
	повторить предыдущий символ от n до m раз ( {n,m}? - предпочтительно наименьший захват)
*
	повторить предыдущий символ 0 и более раз. То же что и {0,}
+
	повторить предыдущий символ 1 и более раз. То же что и {1,}
?
	предыдущий символ либо имеется, либо не имеется. То же что и {0, 1}. Второе значение символа ? после символа повтора .*? - жадность, см. ниже
*?
	повторить предыдущий символ 0 и более раз. Ограничится первым найденным образцом, иначе включить всё до последнего найденного образца.
+?
	повторить предыдущий символ 1 и более раз. Ограничится первым найденным образцом, иначе включить всё до последнего найденного образца.
*+
	захватывающие ноль или больше последовательных совпадений
??
	предпочтительно наименьший захват, например [a-z]??

Ревнивая или сверхжадная квантификация

Захват без возврата к предыдущим шагам поиска.

---  Таблица параметров  ---
*+
	захватывается большее совпадение, например (.*+)! захватывает знак ! не оставляя
++
	захватывается большее совпадение, например (.++)! захватывает знак ! не оставляя.
{n,}+
	захватывается большее совпадение, например (.{2,}+)! захватывает знак ! не оставляя.

Классы

Пример [[:upper:]]{2} - поиск повтора заглавных букв.

---  Таблица параметров  ---
[:alnum:]
	буквы и цифры
[:alpha:]
	буквы
[:ascii:]
	коды символов 0 - 127
[:blank:]
	пробел и символ табуляции
[:cntrl:]
	управляющие символы
[:digit:]
	десятичные цифры \d
[:graph:]
	символы, отображаемые при печати символы, кроме пробела
[:lower:]
	прописные буквы
[:print:]
	символы, отображаемые при печати символы, включая пробел
[:punct:]
	символы, отображаемые при печати символы, кроме букв и цифр
[:space:]
	пробельные символы (не совсем \s, последний включает VT: chr(11) )
[:upper:]
	заглавные буквы
[:word:]
	символы слов (как \w)
[:xdigit:]
	шестнадцатеричные цифры

Условные подмаски

---  Таблица параметров  ---
(?(condition)yes-pattern)
	например (?(?=[a-z])\d), расшифровка (?(условие)шаблон_при_успехе)
(?(condition)yes-pattern|no-pattern)
	например (?(?(?=[^a-z]*[a-z])())?(?:(?=\1)aa|(?!\1)1)), расшифровка (?(условие)шаблон_при_успехе|шаблон_при_не_успехе)
(?=[\w]+)| (?R)
	рекурсивный вызов

Эти флаги не действуют в AutoIt3

---  Таблица параметров  ---
\p
	любой символ пунктуации
\l
	означает, что следующий символ регулярного выражения преобразуется в нижний регистр.
\u
	означает, что следующий символ регулярного выражения преобразуется в верхний регистр.
\L...\Е
	означает, что все символы в регулярном выражении между \L и \Е преобразуются в нижний регистр.
\U...\Е
	означает, что все символы в регулярном выражении между \U и \Е преобразуются в верхний регистр.
\x
	любой шестнадцатеричный символ
\<
	начало слова, т. е. граница между символом, удовлетворяющим \W и символом, удовлетворяющим \w
\>
	конец слова, т. е. граница между символом, удовлетворяющим \w и символом, удовлетворяющим \W

Примеры конструкций

---  Таблица параметров  ---
.*
	повтор любого символа, а значит весь текст
[ ... ]
	одиночный символ множества, например [aeiou] - любой из строчных гласных
[^ ... ]
	ни один из символов множества, например [^aeiou] - ни один из строчных гласных
[0-9A-Fa-f]{6}
	Шестнадцатеричное число, например FF0000.
[А-яЁё]
	диапазон для русских букв. Или так [А-Яа-яЁё]

---  Таблица  ---
Найти (\r\n|\r|\n){2,} заменить на \1 - удаляет пустые строки
Найти (?<![^\s\A])([А-яЁё]+)[\h]+\1 заменить на \1 - удаляет повторы слов
Найти [A-ZА-ЯЁ]{2,}?[a-zа-яё]+ - выявляет файлы, в которых есть ошибки вида "НАйти"- не преднамеренный повтор заглавной буквы
Найти (.{35,}?[ ])(.*?) заменить на '$0'&@CRLF - выполняет перенос строки на границе первого попавшегося пробела после каждых 35 символов.
Найти (?si)(?:.*?)?(https?:\/\/[\w.:]+\/?(?:[\w\/?&=.~;\-+!*_#%])*) - найти ссылки
Найти [A-Za-z0-9._-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}) - найти почтовые ящики

---  Смотрите также  ---
StringInStr, StringRegExpReplace